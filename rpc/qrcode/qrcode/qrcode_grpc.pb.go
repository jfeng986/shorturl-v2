// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: qrcode.proto

package qrcode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Qrcoder_GenQrcode_FullMethodName = "/qrcode.Qrcoder/GenQrcode"
)

// QrcoderClient is the client API for Qrcoder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QrcoderClient interface {
	GenQrcode(ctx context.Context, in *QrcodeRequest, opts ...grpc.CallOption) (*QrcodeResponse, error)
}

type qrcoderClient struct {
	cc grpc.ClientConnInterface
}

func NewQrcoderClient(cc grpc.ClientConnInterface) QrcoderClient {
	return &qrcoderClient{cc}
}

func (c *qrcoderClient) GenQrcode(ctx context.Context, in *QrcodeRequest, opts ...grpc.CallOption) (*QrcodeResponse, error) {
	out := new(QrcodeResponse)
	err := c.cc.Invoke(ctx, Qrcoder_GenQrcode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QrcoderServer is the server API for Qrcoder service.
// All implementations must embed UnimplementedQrcoderServer
// for forward compatibility
type QrcoderServer interface {
	GenQrcode(context.Context, *QrcodeRequest) (*QrcodeResponse, error)
	mustEmbedUnimplementedQrcoderServer()
}

// UnimplementedQrcoderServer must be embedded to have forward compatible implementations.
type UnimplementedQrcoderServer struct {
}

func (UnimplementedQrcoderServer) GenQrcode(context.Context, *QrcodeRequest) (*QrcodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenQrcode not implemented")
}
func (UnimplementedQrcoderServer) mustEmbedUnimplementedQrcoderServer() {}

// UnsafeQrcoderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QrcoderServer will
// result in compilation errors.
type UnsafeQrcoderServer interface {
	mustEmbedUnimplementedQrcoderServer()
}

func RegisterQrcoderServer(s grpc.ServiceRegistrar, srv QrcoderServer) {
	s.RegisterService(&Qrcoder_ServiceDesc, srv)
}

func _Qrcoder_GenQrcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrcodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QrcoderServer).GenQrcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Qrcoder_GenQrcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QrcoderServer).GenQrcode(ctx, req.(*QrcodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Qrcoder_ServiceDesc is the grpc.ServiceDesc for Qrcoder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Qrcoder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qrcode.Qrcoder",
	HandlerType: (*QrcoderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenQrcode",
			Handler:    _Qrcoder_GenQrcode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qrcode.proto",
}
